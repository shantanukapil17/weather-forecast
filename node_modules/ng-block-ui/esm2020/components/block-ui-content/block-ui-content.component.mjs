import { Component, ViewEncapsulation, Input, ViewChild, ComponentRef, TemplateRef, ViewContainerRef } from '@angular/core';
import { BlockUIActions } from '../../constants/block-ui-actions.constant';
import { BlockUIDefaultName } from '../../constants/block-ui-default-name.constant';
import { styles } from './block-ui-content.component.style';
import { template } from './block-ui-content.component.template';
import * as i0 from "@angular/core";
import * as i1 from "../../services/block-ui-instance.service";
import * as i2 from "@angular/common";
export class BlockUIContentComponent {
    constructor(blockUI, resolver, changeDetectionRef) {
        this.blockUI = blockUI;
        this.resolver = resolver;
        this.changeDetectionRef = changeDetectionRef;
        this.name = BlockUIDefaultName;
        this.defaultBlockState = {
            startTimeouts: [],
            stopTimeouts: [],
            updateTimeouts: [],
            blockCount: 0,
            startCallCount: 0,
            stopCallCount: 0
        };
        this.state = { ...this.defaultBlockState };
    }
    ngOnInit() {
        this.settings = this.blockUI.getSettings();
        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());
    }
    ngAfterViewInit() {
        try {
            if (!this.templateCmp) {
                return false;
            }
            if (this.templateCmp instanceof TemplateRef) {
                this.templateOutlet.createEmbeddedView(this.templateCmp);
            }
            else {
                const templateComp = this.resolver.resolveComponentFactory(this.templateCmp);
                this.templateCompRef = this.templateOutlet.createComponent(templateComp);
                this.updateBlockTemplate(this.message);
            }
        }
        catch (error) {
            console.error('ng-block-ui:', error);
        }
    }
    ngAfterViewChecked() {
        this.detectChanges();
    }
    subscribeToBlockUI(blockUI$) {
        return blockUI$.subscribe(event => this.onDispatchedEvent(event));
    }
    onDispatchedEvent(event) {
        switch (event.action) {
            case BlockUIActions.START:
                this.onStart(event);
                break;
            case BlockUIActions.STOP:
                this.onStop(event);
                break;
            case BlockUIActions.UPDATE:
                this.onUpdate(event);
                break;
            case BlockUIActions.RESET:
                this.onReset(event);
                break;
            case BlockUIActions.RESET_GLOBAL:
                this.resetState();
                break;
            case BlockUIActions.UNSUBSCRIBE:
                this.onStop(event);
                this.onUnsubscribe(event.name);
                break;
        }
    }
    onStart({ name, message }) {
        if (name === this.name) {
            const delay = this.delayStart ?? this.settings.delayStart ?? 0;
            this.state.startCallCount += 1;
            const startTimeout = setTimeout(() => {
                this.state.blockCount += 1;
                this.showBlock(message);
                this.updateInstanceBlockCount();
            }, delay);
            this.state.startTimeouts.push(startTimeout);
        }
    }
    onStop({ name }) {
        if (name === this.name) {
            const stopCount = this.state.stopCallCount + 1;
            if (this.state.startCallCount - stopCount >= 0) {
                const delay = this.delayStop ?? this.settings.delayStop ?? 0;
                this.state.stopCallCount = stopCount;
                const stopTimeout = setTimeout(() => {
                    this.state.blockCount -= 1;
                    this.updateInstanceBlockCount();
                    this.detectChanges();
                }, delay);
                this.state.stopTimeouts.push(stopTimeout);
            }
        }
    }
    onUpdate({ name, message }) {
        if (name === this.name) {
            const delay = this.delayStart || this.settings.delayStart || 0;
            clearTimeout(this.state.updateTimeouts[0]);
            const updateTimeout = setTimeout(() => {
                this.updateMessage(message);
            }, delay);
            this.state.updateTimeouts.push(updateTimeout);
        }
    }
    onReset({ name }) {
        if (name === this.name) {
            this.resetState();
        }
    }
    updateMessage(message) {
        this.showBlock(message);
    }
    showBlock(message) {
        this.message = message || this.defaultMessage || this.settings.message;
        this.updateBlockTemplate(this.message);
        this.detectChanges();
    }
    updateBlockTemplate(msg) {
        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {
            this.templateCompRef.instance.message = msg;
        }
    }
    resetState() {
        [
            ...this.state.startTimeouts,
            ...this.state.stopTimeouts,
            ...this.state.updateTimeouts
        ].forEach(clearTimeout);
        this.state = { ...this.defaultBlockState };
        this.updateInstanceBlockCount();
        this.detectChanges();
    }
    onUnsubscribe(name) {
        if (this.blockUISubscription && name === this.name) {
            this.blockUISubscription.unsubscribe();
        }
    }
    updateInstanceBlockCount() {
        if (this.blockUI.blockUIInstances[this.name]) {
            const { blockCount } = this.state;
            this.blockUI.blockUIInstances[this.name].blockCount = blockCount;
        }
    }
    detectChanges() {
        if (!this.changeDetectionRef['destroyed']) {
            this.changeDetectionRef.detectChanges();
        }
    }
    ngOnDestroy() {
        this.resetState();
        this.onUnsubscribe(this.name);
        this.blockUI.clearInstance(this.name);
    }
}
BlockUIContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BlockUIContentComponent, deps: [{ token: i1.BlockUIInstanceService }, { token: i0.ComponentFactoryResolver }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
BlockUIContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: BlockUIContentComponent, selector: "block-ui-content", inputs: { name: "name", delayStart: "delayStart", delayStop: "delayStop", defaultMessage: ["message", "defaultMessage"], templateCmp: ["template", "templateCmp"] }, viewQueries: [{ propertyName: "templateOutlet", first: true, predicate: ["templateOutlet"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: "\n<div class=\"block-ui-wrapper {{name}} {{className}}\" [ngClass]=\"{ 'active': state.blockCount > 0 }\">\n  <div class=\"block-ui-spinner\" *ngIf=\"!templateCmp\">\n    <div class=\"loader\"></div>\n    <div *ngIf=\"message || defaultMessage\" class=\"message\">\n      {{ message || defaultMessage }}\n    </div>\n  </div>\n  <ng-template *ngIf=\"templateCmp\" #templateOutlet></ng-template>\n</div>\n", isInline: true, styles: [".block-ui-wrapper{display:none;position:fixed;height:100%;width:100%;top:0;left:0;background:rgba(0,0,0,.7);z-index:30000;cursor:wait}.block-ui-wrapper.block-ui-wrapper--element{position:absolute}.block-ui-wrapper.active{display:block}.block-ui-wrapper.block-ui-main{position:fixed}.block-ui-spinner,.block-ui-template{position:absolute;top:40%;margin:0 auto;left:0;right:0;transform:translateY(-50%)}.block-ui-spinner>.message{font-size:1.3em;text-align:center;color:#fff}.block-ui__element{position:relative}.loader,.loader:after{border-radius:50%;width:10em;height:10em}.loader{margin:7px auto;font-size:5px;position:relative;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,.2);border-right:1.1em solid rgba(255,255,255,.2);border-bottom:1.1em solid rgba(255,255,255,.2);border-left:1.1em solid #ffffff;transform:translateZ(0);animation:load8 1.1s infinite linear}@keyframes load8{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BlockUIContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'block-ui-content', template: template, encapsulation: ViewEncapsulation.None, styles: [".block-ui-wrapper{display:none;position:fixed;height:100%;width:100%;top:0;left:0;background:rgba(0,0,0,.7);z-index:30000;cursor:wait}.block-ui-wrapper.block-ui-wrapper--element{position:absolute}.block-ui-wrapper.active{display:block}.block-ui-wrapper.block-ui-main{position:fixed}.block-ui-spinner,.block-ui-template{position:absolute;top:40%;margin:0 auto;left:0;right:0;transform:translateY(-50%)}.block-ui-spinner>.message{font-size:1.3em;text-align:center;color:#fff}.block-ui__element{position:relative}.loader,.loader:after{border-radius:50%;width:10em;height:10em}.loader{margin:7px auto;font-size:5px;position:relative;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,.2);border-right:1.1em solid rgba(255,255,255,.2);border-bottom:1.1em solid rgba(255,255,255,.2);border-left:1.1em solid #ffffff;transform:translateZ(0);animation:load8 1.1s infinite linear}@keyframes load8{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.BlockUIInstanceService }, { type: i0.ComponentFactoryResolver }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], delayStart: [{
                type: Input
            }], delayStop: [{
                type: Input
            }], defaultMessage: [{
                type: Input,
                args: ['message']
            }], templateCmp: [{
                type: Input,
                args: ['template']
            }], templateOutlet: [{
                type: ViewChild,
                args: ['templateOutlet', { read: ViewContainerRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,